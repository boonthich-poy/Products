import uuid

class Product:
    def __init__(self, name, description, price, online_shop):
        self.name = name
        self.description = description
        self.price = price
        self.online_shop = online_shop

class Customer:
    def __init__(self, name, email, address):
        self.name = name
        self.email = email
        self.address = address
        self.cart = []          
        self.past_orders = []   

class OnlineShop:
    def __init__(self, name, url):
        self.name = name
        self.url = url
        self.products = []

    def addingItemsToCart(self, customer, product, quantity):
        customer.cart.append((product, quantity))

    def checkOut(self, customer):
        if not customer.cart:
            print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
            return

        total_price = sum(product.price * quantity for product, quantity in customer.cart)
        order_id = str(uuid.uuid4())
        order = {
            "order_id": order_id,
            "items": [(product.name, quantity) for product, quantity in customer.cart],
            "total": total_price
        }
        customer.past_orders.append(order)
        customer.cart.clear()
        print(f"‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {order_id}")
        return order_id

    def orderTracking(self, customer, order_id):
        for order in customer.past_orders:
            if order["order_id"] == order_id:
                print("üì¶ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:")
                print(f"‡∏£‡∏´‡∏±‡∏™: {order['order_id']}")
                for item in order["items"]:
                    print(f"- {item[0]}: {item[1]} ‡∏ä‡∏¥‡πâ‡∏ô")
                print(f"üí∞ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {order['total']} ‡∏ö‡∏≤‡∏ó")
                return
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")

shop = OnlineShop("Narak", "www.narakbeauty.com")

product_data = [
    ("‡πÇ‡∏ü‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤", "Smooth E Babyface Foam", 30),
    ("‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πà", "‡∏™‡∏Å‡πä‡∏≠‡∏ï‡∏ï‡πå ‡∏Ñ‡∏•‡∏µ‡∏ô‡πÅ‡∏Ñ‡∏£‡πå ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πà 3 ‡∏ä‡∏±‡πâ‡∏ô", 15),
    ("‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥", "BeNice ‡∏ö‡∏µ‡πÑ‡∏ô‡∏ã‡πå ‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ ‡∏ö‡∏•‡∏π‡∏° ‡∏≠‡∏¥‡∏ô ‡∏≠‡∏∞ ‡∏ö‡∏≤‡∏ò ‡πÄ‡∏≠‡∏ô‡∏ä‡∏≤‡∏ô‡∏ó‡πå ", 181),
    ("‡πÅ‡∏ä‡∏°‡∏û‡∏π", "TRESemme' ‡πÄ‡∏ó‡∏£‡∏ã‡∏≤‡πÄ‡∏°‡πà", 149),
    ("‡∏Ñ‡∏£‡∏µ‡∏°‡∏ô‡∏ß‡∏î‡∏ú‡∏°", "TRESEMME Keratin Smooth Conditioner", 199),
]

for name, desc, price in product_data:
    product = Product(name, desc, price, shop)
    shop.products.append(product)

customer = Customer("Narak", "Narak@shop.com", "90/1 m.7 nakhonpathom")

shop.addingItemsToCart(customer, shop.products[0], 2)  # ‡πÇ‡∏ü‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ x2
shop.addingItemsToCart(customer, shop.products[1], 1)  # ‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πà x1

order_id = shop.checkOut(customer)

shop.orderTracking(customer, order_id)
